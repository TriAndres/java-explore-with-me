{
	"info": {
		"_postman_id": "792b1333-8a5f-4266-a491-a126a4b81026",
		"name": "Comments для отправки",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "34817112",
		"_collection_link": "https://myteam-5362.postman.co/workspace/MyTeam~90d59427-0a41-49ba-8328-b65785fc7dc5/collection/34817112-792b1333-8a5f-4266-a491-a126a4b81026?action=share&source=collection_link&creator=34817112"
	},
	"item": [
		{
			"name": "Подготовка объектов",
			"item": [
				{
					"name": "Подготовка: Добавляем User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('user1', pm.response.json().id)\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User1\",\r\n    \"email\": \"User1@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/users"
					},
					"response": []
				},
				{
					"name": "Подготовка: Добавляем user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('user2', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User2\",\r\n    \"email\": \"user2@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/users"
					},
					"response": []
				},
				{
					"name": "Подготовка: Добавляем user3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('user3', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User3\",\r\n    \"email\": \"user3@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/users"
					},
					"response": []
				},
				{
					"name": "Подготовка: Добавляем user4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('user4', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User4\",\r\n    \"email\": \"user4@mail.ru\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/users"
					},
					"response": []
				},
				{
					"name": "Подготовка: Добавляем категорию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('category1', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Category1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/categories"
					},
					"response": []
				},
				{
					"name": "Подготовка: User 1 добавляет событие 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event1', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user1}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event1}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подготовка: User 1 добавляет событие 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event2', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user1}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: User 1 добавляет событие 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event3', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user1}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event3}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подготовка: User 3 добавляет событие 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event4', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user3}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event4}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event4}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подготовка: User 3 добавляет событие 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event5', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user3}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event5}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event5}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подготовка: User 3 добавляет событие 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event6', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user3}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event6}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event6}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Подготовка: User 3 добавляет событие 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('event7', pm.response.json().id)\r",
									"}) "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n    \"title\": \"Заплыв на резиновых уточках\",\r\n    \"annotation\": \"Одевайтесь тепло, берите зонтики, чай, кофе, хорошее настроение и резиновых уточек\",\r\n    \"description\": \"Любительский заплыв на резиновых уточках в акватории Москвы-реки\",\r\n    \"category\": {{category1}},\r\n    \"eventDate\": \"2026-09-25 22:36:48\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/users/{{user3}}/events"
					},
					"response": []
				},
				{
					"name": "Подготовка: Админ публикует событие 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success;\r",
									"}); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/admin/events/{{event7}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"admin",
								"events",
								"{{event7}}"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 1 для события 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment1', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"пупсоскот\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user1}}/comments?event={{event4}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user1}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 1 для события 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment2', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"таймобобр\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user1}}/comments?event={{event5}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user1}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event5}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 1 для события 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success\r",
									"    pm.collectionVariables.set('comment3', pm.response.json().id)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"буран\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user1}}/comments?event={{event6}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user1}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event6}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 3 для события 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment5', pm.response.json().id)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"не пойду\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user3}}/comments?event={{event1}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user3}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 3 для события 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment6', pm.response.json().id)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"пойду\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user3}}/comments?event={{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user3}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 4 для события 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment7', pm.response.json().id)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"пойду\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user4}}/comments?event={{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user4}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Комментарий от пользователя 4 для события 7",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"An access token is returned\", () => {\r",
									"    pm.response.to.be.success \r",
									"    pm.collectionVariables.set('comment8', pm.response.json().id)\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"пойду\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{HOST}}/users/{{user4}}/comments?event={{event7}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"users",
								"{{user4}}",
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновляем комментарий 8",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(function() {\r",
									"    pm.response.to.be.success; // код ответа должен быть равен 200 OK\r",
									"}); \r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"editable\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{HOST}}/admin/comments/{{comment8 }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Private",
			"item": [
				{
					"name": "Новый комментарий",
					"item": [
						{
							"name": "Комментарий к несуществующему событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CREATED\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/2/comments?event=100000",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"2",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий к неопубликованному событию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ NOT FOUND\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user2}}/comments?event={{event2}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user2}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий от несуществующего пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ NOT FOUND\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/20000/comments?event=1",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"20000",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Комментарий на свое событие",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"крутая идея !\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user1}}/comments?event={{event1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user1}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Корректный комментарий от второго пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    const eventIdVar= pm.collectionVariables.get('event7')\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal('ENABLE','Статус');\r",
											"    pm.expect(target.authorName).equal('User2','Пользователь');\r",
											"    pm.expect(target.text).equal(source.text,'Текст');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user2}}/comments?event={{event7}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user2}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event7}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Корректный комментарий от первого пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    const eventIdVar= pm.collectionVariables.get('event7')\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal('ENABLE','Статус');\r",
											"    pm.expect(target.authorName).equal('User1','Пользователь');\r",
											"    pm.expect(target.text).equal(source.text,'Текст');\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"я пойду\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user1}}/comments?event={{event7}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user1}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event7}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Повторный комментарий второго пользователя",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"еще один комментарий\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user2}}/comments?event={{event7}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user2}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event7}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Пустой комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ BAD REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"}); \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user4}}/comments?event={{event1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user4}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Слишком длинный комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ BAD REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"}); \r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"вAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user4}}/comments?event={{event1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user4}}",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event1}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Обновление комментария",
					"item": [
						{
							"name": "Пользователь 1 обновляет комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    const eventIdVar= pm.collectionVariables.get('event4')\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal('ENABLE','Статус');\r",
											"    pm.expect(target.authorName).equal('User1','Пользователь');\r",
											"    pm.expect(target.text).equal(source.text,'Текст');\r",
											"    pm.expect(target.modified).equal(true,'Был ли модифицирован');\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Изменный комментарий\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST}}/users/{{user1}}/comments/{{comment1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"users",
										"{{user1}}",
										"comments",
										"{{comment1}}"
									],
									"query": [
										{
											"key": "event",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Пользователь 3 обновляет чужой комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"Изменный комментарий\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user3}}/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Пользователь 2 обновляет комментарий 1 пустой строкой",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ BAD REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user2}}/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Пользователь 2 обновляет комментарий 1 слишком длинной строкой",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ BAD REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"вAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAвAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user2}}/comments/{{comment1}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаляем комментарий",
					"item": [
						{
							"name": "Попытка удалить чужой комментарий",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый нах\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user3}}/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Пользователь 1 успешно удаляет комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ NO CONTENT\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый нах\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user1}}/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Пользователь 1 пытается удалить комментарий 1 повторно",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"}); \r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"text\": \"первый нах\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/users/{{user1}}/comments/{{comment1}}"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Обновление",
					"item": [
						{
							"name": "Обновляем комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal(source.state);\r",
											"    pm.expect(target.editable).equal(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"state\": \"DISABLE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Обновляем комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal(source.state);\r",
											"    pm.expect(target.editable).equal(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"state\": \"DISABLE\",\r\n    \"editable\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Обновляем комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal('ENABLE');\r",
											"    pm.expect(target.editable).equal(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"editable\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment2}}"
							},
							"response": []
						},
						{
							"name": "Обновляем комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля: id, parentId, childrenCommentsId, state, eventId, authorName, editable, text, created, isModified, lastModification, likes, dislikes\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target).to.have.property('id');\r",
											"    pm.expect(target).to.have.property('state');\r",
											"    pm.expect(target).to.have.property('eventId');\r",
											"    pm.expect(target).to.have.property('authorName');\r",
											"    pm.expect(target).to.have.property('editable');\r",
											"    pm.expect(target).to.have.property('text');\r",
											"    pm.expect(target).to.have.property('created');\r",
											"    pm.expect(target).to.have.property('modified');\r",
											"    pm.expect(target).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const source = JSON.parse(pm.request.body.raw);\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"    pm.expect(target.state).equal('DISABLE');\r",
											"    pm.expect(target.editable).equal(false);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"state\": \"DISABLE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment8}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Удаляем",
					"item": [
						{
							"name": "Удаляем комментарий 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ NO CONTENT\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"editable\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment1}}"
							},
							"response": []
						},
						{
							"name": "Удаляем комментарий 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ NO CONTENT\", function() {\r",
											"    pm.response.to.have.status(204);\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"editable\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{HOST}}/admin/comments/{{comment1}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Поиск",
					"item": [
						{
							"name": "Поиск без параметров",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(8);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{HOST}}/admin/comments"
							},
							"response": []
						},
						{
							"name": "Поиск from size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?from=4&size=2",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "from",
											"value": "4"
										},
										{
											"key": "size",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск номеру комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?comment={{comment5}},{{comment6}},{{comment8}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "comment",
											"value": "{{comment5}},{{comment6}},{{comment8}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по номеру события",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(4);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?event={{event6}},{{event7}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "event",
											"value": "{{event6}},{{event7}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по номеру автора",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(3);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?user={{user1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "user",
											"value": "{{user1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск нередактируемых",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?editable=false",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "editable",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск текста",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(5);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?text=поЙдУ",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "поЙдУ"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по дате",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Ответ должна содержать поля\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target[0]).to.have.property('id');\r",
											"    pm.expect(target[0]).to.have.property('state');\r",
											"    pm.expect(target[0]).to.have.property('eventId');\r",
											"    pm.expect(target[0]).to.have.property('authorName');\r",
											"    pm.expect(target[0]).to.have.property('editable');\r",
											"    pm.expect(target[0]).to.have.property('text');\r",
											"    pm.expect(target[0]).to.have.property('created');\r",
											"    pm.expect(target[0]).to.have.property('modified');\r",
											"    pm.expect(target[0]).to.have.property('lastModification');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(8);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?end=2030-09-27 17:07:32&start=2020-09-27 17:07:32",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "end",
											"value": "2030-09-27 17:07:32"
										},
										{
											"key": "start",
											"value": "2020-09-27 17:07:32"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по дате",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?end=1030-09-27 17:07:32&start=1020-09-27 17:07:32",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "end",
											"value": "1030-09-27 17:07:32"
										},
										{
											"key": "start",
											"value": "1020-09-27 17:07:32"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Ошибочный поиск по дате",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ BAD REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?end=1030-09-27 17:07:32&start=2020-09-27 17:07:32",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "end",
											"value": "1030-09-27 17:07:32"
										},
										{
											"key": "start",
											"value": "2020-09-27 17:07:32"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по возрастанию",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(8);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?order=DESC",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "order",
											"value": "DESC"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по статусу комментария",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?commentState=DISABLE",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "commentState",
											"value": "DISABLE"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск по нескольким параметрам",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Должен вернуться ответ OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody; \r",
											"    pm.response.to.be.json;\r",
											"}); \r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    const target = pm.response.json()\r",
											"    pm.expect(target.length).equal(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST}}/admin/comments?comment={{comment1}}, {{comment5}}, {{comment7}}&commentState=ENABLE&user={{user2}},{{user3}}&editable=true&text=ой&event={{event1}}",
									"host": [
										"{{HOST}}"
									],
									"path": [
										"admin",
										"comments"
									],
									"query": [
										{
											"key": "comment",
											"value": "{{comment1}}, {{comment5}}, {{comment7}}"
										},
										{
											"key": "commentState",
											"value": "ENABLE"
										},
										{
											"key": "user",
											"value": "{{user2}},{{user3}}"
										},
										{
											"key": "editable",
											"value": "true"
										},
										{
											"key": "text",
											"value": "ой"
										},
										{
											"key": "event",
											"value": "{{event1}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Public",
			"item": [
				{
					"name": "Поиск без параметров",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?event={{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск без параметров неопубликованного события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(0);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?event={{event2}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск без параметров удаленного комментария",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?event={{event7}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "event",
									"value": "{{event7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск from size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?from=1&size=1&event={{event7}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "sort",
									"value": "ASC",
									"disabled": true
								},
								{
									"key": "from",
									"value": "1"
								},
								{
									"key": "size",
									"value": "1"
								},
								{
									"key": "event",
									"value": "{{event7}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск c сортировкой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?order=DESC&event={{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "order",
									"value": "DESC"
								},
								{
									"key": "from",
									"value": "1",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "event",
									"value": "{{event3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск c сортировкой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Должен вернуться ответ OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody; \r",
									"    pm.response.to.be.json;\r",
									"}); \r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    const target = pm.response.json()\r",
									"    pm.expect(target.length).equal(2);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST}}/comments?order=ASC&event={{event3}}",
							"host": [
								"{{HOST}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "from",
									"value": "1",
									"disabled": true
								},
								{
									"key": "size",
									"value": "1",
									"disabled": true
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "event",
									"value": "{{event3}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "localhost:8080"
		},
		{
			"key": "user1",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2",
			"value": "",
			"type": "string"
		},
		{
			"key": "user3",
			"value": "",
			"type": "string"
		},
		{
			"key": "user4",
			"value": "",
			"type": "string"
		},
		{
			"key": "event1",
			"value": "",
			"type": "string"
		},
		{
			"key": "event2",
			"value": "",
			"type": "string"
		},
		{
			"key": "category1",
			"value": ""
		},
		{
			"key": "comment1",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment2",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment3",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment4",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment5",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment6",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment7",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment8 ",
			"value": "",
			"type": "string"
		},
		{
			"key": "event3",
			"value": "",
			"type": "string"
		},
		{
			"key": "event4",
			"value": "",
			"type": "string"
		},
		{
			"key": "event5",
			"value": "",
			"type": "string"
		},
		{
			"key": "event6",
			"value": "",
			"type": "string"
		},
		{
			"key": "event7",
			"value": "",
			"type": "string"
		},
		{
			"key": "comment8",
			"value": ""
		}
	]
}