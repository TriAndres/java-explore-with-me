{
	"info": {
		"_postman_id": "adf1e810-9aa4-4dc1-9b32-d3d85cdd3f17",
		"name": "comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34651277"
	},
	"item": [
		{
			"name": "Добавление нового комментария",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); \r",
							"    pm.response.to.be.json; \r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержать объект CommentDto\", function() {\r",
							"    pm.expect(body).to.have.property('id').that.is.a('number').and.is.not.equal(0);\r",
							"    pm.expect(body).to.have.property('creator');\r",
							"    pm.expect(body).to.have.property('event');\r",
							"    pm.expect(body).to.have.property('moderationStatus');\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('createdDate');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Какой-то текст для комментария\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events",
						"{{eventId}}",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); \r",
							"    pm.response.to.be.json; \r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержать объект CommentDto\", function() {\r",
							"    pm.expect(body).to.have.property('id').that.is.a('number').and.is.not.equal(0);\r",
							"    pm.expect(body).to.have.property('creator');\r",
							"    pm.expect(body).to.have.property('event');\r",
							"    pm.expect(body).to.have.property('moderationStatus');\r",
							"    pm.expect(body).to.have.property('text');\r",
							"    pm.expect(body).to.have.property('createdDate');\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"Ответ должен обновить поле text\", function() {\r",
							"    pm.expect(body.text).to.include(\"Новый какой-то текст\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"Новый какой-то текст\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events",
						"{{eventId}}",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "commentId",
							"value": "1",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Модерация комментариев",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); \r",
							"    pm.response.to.be.json; \r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержать массив объектов CommentDto\", function() {\r",
							"    pm.expect(body).to.be.an('array').that.is.not.empty; \r",
							"    pm.expect(body.length).to.be.greaterThan(0); \r",
							"\r",
							"    body.forEach(comment => {\r",
							"        pm.expect(comment).to.have.property('id').that.is.a('number').and.is.not.equal(0);\r",
							"        pm.expect(comment).to.have.property('creator');\r",
							"        pm.expect(comment).to.have.property('event');\r",
							"        pm.expect(comment).to.have.property('moderationStatus').that.equals('PUBLISHED');\r",
							"        pm.expect(comment).to.have.property('text');\r",
							"        pm.expect(comment).to.have.property('createdDate');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"commentsId\": [1],\r\n    \"status\": \"PUBLISHED\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{eventId}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{eventId}}",
						"comments"
					],
					"query": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 204\", function() {\r",
							"    pm.response.to.have.status(204); \r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{userId}}/events/{{eventId}}/comments/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{userId}}",
						"events",
						"{{eventId}}",
						"comments",
						"1"
					],
					"query": [
						{
							"key": "commentId",
							"value": "3",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Создание пользователя\r",
					"// Создание пользователя\r",
					"function getRandomEmail() {\r",
					"    const randomNumber = Math.floor(Math.random() * 1000);\r",
					"    return `user${randomNumber}@example.com`;\r",
					"}\r",
					"\r",
					"function getRandomString(length) {\r",
					"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"    let result = '';\r",
					"    const charactersLength = characters.length;\r",
					"    for (let i = 0; i < length; i++) {\r",
					"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"    }\r",
					"    return result;\r",
					"}\r",
					"\r",
					"const randomName = getRandomString(10); // Генерируем случайное имя длиной 10 символов\r",
					"const randomEmail = getRandomString(5) + '@example.com'; // Генерируем случайный email\r",
					"const randomAnnotation = getRandomString(20);\r",
					"const randomDescription = getRandomString(100);\r",
					"const randomTitle = getRandomString(20);\r",
					"\r",
					"pm.sendRequest({\r",
					"    url: \"http://localhost:8080/admin/users\",\r",
					"    method: 'POST',\r",
					"    header: {\r",
					"        'Content-Type': 'application/json'\r",
					"    },\r",
					"    body: {\r",
					"        mode: 'raw',\r",
					"        raw: JSON.stringify({\r",
					"            name: randomName,\r",
					"            email: randomEmail\r",
					"        })\r",
					"    }\r",
					"}, function (err, res) {\r",
					"    if (err) {\r",
					"        console.error(err);\r",
					"    } else {\r",
					"        // Сохраните ID пользователя\r",
					"        const userResponseData = res.json();\r",
					"        pm.environment.set(\"userId\", userResponseData.id); // Предполагается, что id - это поле с userId в ответе\r",
					"\r",
					"        // Создание категории\r",
					"        pm.sendRequest({\r",
					"            url: \"http://localhost:8080/admin/categories\",\r",
					"            method: 'POST',\r",
					"            header: {\r",
					"                'Content-Type': 'application/json'\r",
					"            },\r",
					"            body: {\r",
					"                mode: 'raw',\r",
					"                raw: JSON.stringify({\r",
					"                    name: randomName\r",
					"                })\r",
					"            }\r",
					"        }, function (err, res) {\r",
					"            if (err) {\r",
					"                console.error(err);\r",
					"            } else {\r",
					"                // Сохраните ID категории\r",
					"                const categoryResponseData = res.json();\r",
					"                pm.environment.set(\"categoryId\", categoryResponseData.id); // Предполагая, что API возвращает ID\r",
					"\r",
					"                // Теперь отправляем запрос на создание события\r",
					"                pm.sendRequest({\r",
					"                    url: `http://localhost:8080/users/${userResponseData.id}/events`, // Используем userResponseData.id\r",
					"                    method: 'POST',\r",
					"                    header: {\r",
					"                        'Content-Type': 'application/json'\r",
					"                    },\r",
					"                    body: {\r",
					"                        mode: 'raw',\r",
					"                        raw: JSON.stringify({\r",
					"                            annotation: randomAnnotation,\r",
					"                            category: categoryResponseData.id, // Используем сохраненный categoryId\r",
					"                            description: \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r",
					"                            eventDate: \"2024-12-31 15:10:05\",\r",
					"                            location: {\r",
					"                                latitude: 13.7558,\r",
					"                                longitude: 315.6173\r",
					"                            },\r",
					"                            paid: true,\r",
					"                            participantLimit: 10,\r",
					"                            requestModeration: false,\r",
					"                            title: \"Сплав на супер байдарках\"\r",
					"                        })\r",
					"                    }\r",
					"                }, function (err, res) {\r",
					"                    if (err) {\r",
					"                        console.error(err);\r",
					"                    } else {\r",
					"                        // Обработка ответа на создание события\r",
					"                        const eventResponseData = res.json();\r",
					"                        pm.environment.set(\"eventId\", eventResponseData.id); // Сохраняем eventId\r",
					"                        \r",
					"                        // Проверка, что событие создано и имеет ID\r",
					"                        pm.test(\"Событие создано\", function () {\r",
					"                            pm.expect(eventResponseData).to.have.property('id'); // Проверка, что событие создано и имеет ID\r",
					"                        });\r",
					"                    }\r",
					"                });\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"});\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}